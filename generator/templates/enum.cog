[[[cog
import cog

mappings = {
    "name" : enum.get_name(),
    "namespace" : enum.namespace.get_name(),
    "storage" : enum.get_storage(),
    "gen_enum_vals" : renderer.gen_enum_vals(),
    "gen_name_2_val" : renderer.gen_name_2_val(),
    "gen_to_string_view" : renderer.gen_to_string_view(),
    "gen_from_string_view" : renderer.gen_from_string_view(),
    "gen_val_2_name" : renderer.gen_val_2_name()
}

data = """
namespace {namespace}
{{
class {name}_enum
{{
public:
    enum class data_type : {storage} 
    {{
        {gen_enum_vals} 
    }};

    static  constexpr data_type empty_value = data_type::Empty;

    constexpr {name}_enum() = default;

    template <data_type V > using enum_constant = std::integral_constant < data_type, V>;

    using Name2Value = boost::mp11::mp_list
    <
            {gen_name_2_val}
    >;
    static_assert(boost::mp11::mp_is_map< Name2Value >::value, "Name2Value");

    using Value2Name = boost::mp11::mp_list
    <
            {gen_val_2_name}
    >;
    static_assert(boost::mp11::mp_is_map< Value2Name >::value, "Value2Name");

    constexpr {name}_enum(data_type val) : val_(val)
    {{
    }}
    constexpr {name}_enum(const {name}_enum&) = default;

    constexpr operator data_type() const
    {{
        return val_;
    }}

    constexpr bool empty() const
    {{
        return empty_value == val_;
    }}

    constexpr bool empty()
    {{
        return empty_value == val_;
    }}

    void clear()
    {{
        val_ = empty_value;
    }}
 
    std::string_view toStringView() const
    {{
        using namespace boost::mp11;
        switch (val_)
        {{
        {gen_to_string_view}
        default:
            break;

        }}
        return ""sv;
    }}

    std::string_view toStringView()
    {{
        return std::as_const(*this).toStringView();
    }}

    std::string toString() const
    {{
        return std::string(toStringView());
    }}

    std::string toString()
    {{
        return std::string(std::as_const(*this).toStringView());
    }}

    {name}_enum & fromString(std::string_view s)
    {{
        switch (TypeLib::string_hash(s))
        {{
         {gen_from_string_view}
         default: break;
        }}
        return *this;
    }}

private:
    data_type val_ = empty_value;
}};

}}
""".format(**mappings)

cog.outl(data)

]]]
[[[end]]]